<?php

/**
 * @file
 * Adds a question and answer type to the Captcha module.
 */

/**
 * Implements hook_config_info().
 */
function riddler_config_info() {
  $prefixes['riddler.settings'] = array(
    'label' => t('Captcha Riddler Settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_permission().
 */
function riddler_permission() {
  return array(
    'administer riddler' => array(
      'title' => t('Administer Captcha Riddler'),
      'description' => t('Perform administration tasks for Captcha Riddler.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function riddler_menu() {
  $items = array();
  $items['admin/config/people/captcha/riddler'] = array(
    'title' => 'Riddler',
    'description' => 'Allows you to force a question to a number of forms to counter f.e. spammers.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('riddler_settings'),
    'access arguments' => array('administer riddler'),
    'type' => MENU_LOCAL_TASK,
  );
  // This only makes sense with Locale module enabled.
  if (module_exists('locale')) {
    $items['admin/config/people/captcha/riddler/translate'] = array(
      'title' => 'Riddler translation',
      'page callback' => 'riddler_translations_page',
      'access arguments' => array('administer riddler'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  return $items;
}

/**
 * Settings form definition.
 */
function riddler_settings($form, &$form_state) {
  $i = 0;
  // Load the riddles either from tempstore or from config.
  if (isset($form_state['storage']['riddles'])) {
    $riddles = $form_state['storage']['riddles'];
  }
  else {
    $riddles = riddler_get_riddles();
  }
  $form = array();
  $header = riddler_page_header();
  if (!empty($header)) {
    $form['header'] = array(
      '#type' => 'markup',
      '#markup' => $header,
    );
    $form['help'] = array(
      '#type' => 'help',
      '#markup' => 'If you plan to translate these riddles, they should be in English.',
    );
  }
  $form['#tree'] = TRUE;
  $form['riddler_groups'] = array(
    '#type' => 'fieldset',
    '#title' => t('Riddles'),
    '#prefix' => '<div id="riddler-groups">',
    '#suffix' => '</div>',
  );
  // If the add another button is clicked, add an empty array element.
  if (isset($form_state['triggering_element']) && $form_state['triggering_element']['#name'] == 'add-riddle') {
    $uuid = new Uuid();
    $key = $uuid->generate();
    $riddles[$key] = array('question' => '', 'answer' => '');
  }
  $riddler_groups = isset($form_state['values']['riddler_groups']) ? $form_state['values']['riddler_groups'] : array();
  foreach ($riddles as $key => $riddle) {
    $i++;
    $access = TRUE;
    // Is ajax rebuilding the form?
    if (isset($form_state['values'])) {
      // Is this question deleted?
      if (isset($riddler_groups[$key]['riddler_delete']) && $riddler_groups[$key]['riddler_delete']) {
        $access = FALSE;
      }
    }
    $collapse = TRUE;
    if (!empty($riddler_groups) && empty($form_state['values']['riddler_groups'][$key])) {
      $collapse = FALSE;
    }
    $title = t('Riddle') . ' ' . $i . ': ' . $riddle['question'];
    if (isset($riddler_groups[$key]) && !empty($riddler_groups[$key]['riddler_question'])) {
      $title = t('Riddle') . ' ' . $i . ': ' . $riddler_groups[$key]['riddler_question'];
    }
    $form['riddler_groups'][$key] = array(
      '#type' => 'fieldset',
      '#title' => $title,
      '#collapsible' => TRUE,
      '#collapsed' => $collapse,
      '#access' => $access,
    );
    $form['riddler_groups'][$key]['riddler_question'] = array(
      '#type' => 'textfield',
      '#title' => t('Question'),
      '#description' => t('A question that you require anonymous users to answer'),
      '#default_value' => isset($riddler_groups[$key]['riddler_question']) ? $riddler_groups[$key]['riddler_question'] : $riddle['question'],
      '#required' => FALSE,
      '#access' => $access,
    );
    $form['riddler_groups'][$key]['riddler_answer'] = array(
      '#type' => 'textfield',
      '#title' => t('Answer'),
      '#default_value' => isset($riddler_groups[$key]['riddler_answer']) ? $riddler_groups[$key]['riddler_answer'] : $riddle['answer'],
      '#description' => t('Answer to the above question. You may allow more than one correct answer by entering a comma or space-separated list. Answers are not case sensitive.  Answers must be only one word.'),
      '#access' => $access,
      '#required' => FALSE,
    );
    $form['riddler_groups'][$key]['riddler_delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete'),
      '#description' => t('Permanently delete this riddle/answer pair?'),
      '#required' => FALSE,
      '#default_value' => isset($riddler_groups[$key]['riddler_delete']) ? $riddler_groups[$key]['riddler_delete'] : FALSE,
      '#ajax' => array(
        'callback' => 'riddler_ajax_add_riddle',
        'wrapper' => 'riddler-groups',
        'method' => 'replace',
        'effect' => 'fade',
        '#access' => $access,
      ),
    );
  }
  $form['riddler_groups']['riddler_add'] = array(
    '#type' => 'button',
    '#value' => t('Add another'),
    '#name' => 'add-riddle',
    '#ajax' => array(
      'callback' => 'riddler_ajax_add_riddle',
      'wrapper' => 'riddler-groups',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $config = config('riddler.settings');
  $form['use_description'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show a short description beneath the riddles'),
    '#default_value' => $config->get('use_description'),
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Riddler help text'),
    '#default_value' => $config->get('description'),
    '#states' => array(
      'invisible' => array(
        ':input[name="use_description"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['riddler_weight'] = array(
    '#type' => 'number',
    '#title' => t('Weight'),
    '#default_value' => $config->get('riddler_weight'),
    '#min' => -20,
    '#max' => 20,
    '#description' => t('Weight of the Riddler form element'),
    '#required' => TRUE,
  );
  // Use tempstore to park already added values.
  $form_state['storage']['riddles'] = $riddles;
  $form['#validate'][] = 'riddler_settings_validate';
  $form['#submit'][] = 'riddler_settings_submit';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );
  return $form;
}

/**
 * Riddler settings form ajax callback.
 */
function riddler_ajax_add_riddle($form, $form_state) {
  return $form['riddler_groups'];
}

/**
 * Validate the settings form.
 */
function riddler_settings_validate($form, &$form_state) {
  $i = 0;
  unset($form_state['values']['riddler_groups']['riddler_add']);
  $riddler_groups = $form_state['values']['riddler_groups'];
  foreach ($riddler_groups as $uuid => $values) {
    $i++;
    if ($values['riddler_question'] != '' && $values['riddler_answer'] == '') {
      $element = "riddler_groups][{$uuid}][riddler_answer";
      form_set_error($element, t('Riddle !i is incomplete (answer is missing).', array('!i' => $i)));
    }
    if ($values['riddler_question'] == '' && $values['riddler_answer'] != '') {
      $element = "riddler_groups][{$uuid}][riddler_question";
      form_set_error($element, t('Riddle !i is incomplete (question is missing).', array('!i' => $i)));
    }
    // Unset any completely empty riddle/answer pairs.
    if ($riddler_groups[$uuid]['riddler_question'] == '' && $riddler_groups[$uuid]['riddler_answer'] == '') {
      unset($form_state['values']['riddler_groups'][$uuid]);
    }
  }
}

/**
 * Submit the settings form.
 */
function riddler_settings_submit($form, &$form_state) {
  $riddler_questions = array();
  $translatables = array();
  $riddler_groups = $form_state['values']['riddler_groups'];
  foreach ($riddler_groups as $uuid => $values) {
    // Make sure pair is not deleted.
    if (!$values['riddler_delete']) {
      $riddler_questions[$uuid] = array(
        'question' => $values['riddler_question'],
        'answer' => $values['riddler_answer'],
      );
      $translatables[] = "riddler_questions.{$uuid}.question";
      $translatables[] = "riddler_questions.{$uuid}.answer";
      if (module_exists('locale')) {
        // Trigger locale to put new strings into translation database.
        $base_context = "config:riddler.settings:riddler_questions.{$uuid}";
        locale(filter_xss($values['riddler_question']), $base_context . '.question');
        locale(filter_xss($values['riddler_answer']), $base_context . '.answer');
      }
    }
  }
  if (!empty($form_state['values']['description'])) {
    $translatables[] = 'description';
    if (module_exists('locale')) {
      locale(check_plain($form_state['values']['description']), 'config:riddler.settings:description');
    }
  }
  $config = config('riddler.settings');
  $config->set('_config_translatables', $translatables);
  $config->set('riddler_weight', $form_state['values']['riddler_weight']);
  $config->set('use_description', $form_state['values']['use_description']);
  $config->set('description', $form_state['values']['description']);
  $config->set('riddler_questions', $riddler_questions);
  $config->save();

  _riddler_cleanup_obsolete_locale_strings($translatables);
  backdrop_set_message(t('Riddler settings saved.'), 'status');
}

/**
 * Helper function to output a page header with fake secondary tabs.
 */
function riddler_page_header() {
  $markup = '';
  // The secondary tabs only make sense, when translation is needed. Module
  // locale or language are unreliable indicators, as they're also enabled on
  // single language sites that aren't English.
  if (module_exists('translation')) {
    $variables = array();
    $variables['attributes']['class'] = array('tabs', 'secondary');
    $variables['links'][] = array(
      'title' => t('Riddles'),
      'href' => 'admin/config/people/captcha/riddler',
    );
    $variables['links'][] = array(
      'title' => t('Riddle translations'),
      'href' => 'admin/config/people/captcha/riddler/translate',
    );
    $markup = theme('links', $variables);
  }
  return $markup;
}

/**
 * Page callback for riddle translation overview.
 *
 * Provides an overview similar to the locale page, but only shows entries of
 * translatable config items for this module.
 */
function riddler_translations_page() {
  $output = riddler_page_header();
  $config = config('riddler.settings');
  $riddles = $config->get('riddler_questions');

  if (!empty($riddles)) {
    $translatables = $config->get('_config_translatables');
    // Create array of contexts to search for in locale db.
    $contexts = array();
    foreach ($translatables as $translatable) {
      $prefix = 'config:riddler.settings:';
      $contexts[] = $prefix . $translatable;
    }

    $sql_query = db_select('locales_source', 's');
    $sql_query->leftJoin('locales_target', 't', 't.lid = s.lid');
    $sql_query->fields('s', array('source', 'context', 'lid'));
    $sql_query->fields('t', array('translation', 'language'));
    $sql_query->condition('s.context', $contexts, 'IN');

    $sql_query = $sql_query->extend('PagerDefault')->limit(20);
    $locales = $sql_query->execute()->fetchAll();

    $strings = array();
    foreach ($locales as $data) {
      $lid = $data->lid;
      if (!isset($strings[$lid])) {
        $strings[$lid] = array(
          'source' => $data->source,
          'context' => $data->context,
          'languages' => array(),
        );
      }
      if (isset($data->language)) {
        $strings[$lid]['languages'][$data->language] = $data->language;
      }
    }

    $header = array(t('String'), t('Context'), t('Languages'), t('Operations'));
    $rows = array();
    $languages = language_list();
    unset($languages['en']);
    foreach ($strings as $lid => $data) {
      // Create list of translated / untranslated by langcode.
      $language_codes = array();
      foreach ($languages as $langcode => $language) {
        if (isset($data['languages'][$langcode])) {
          $language_codes[] = $langcode;
        }
        else {
          $language_codes[] = '<strike>' . $langcode . '</strike>';
        }
      }
      $langcodes = implode(' ', $language_codes);

      // Create action links to original locale forms.
      $links = array();
      $links['edit'] = array(
        'title' => t('Edit'),
        'href' => "admin/config/regional/translate/edit/$lid",
        'query' => backdrop_get_destination(),
        'class' => array('nowrap'),
      );
      $links['delete'] = array(
        'title' => t('Delete'),
        'href' => "admin/config/regional/translate/delete/$lid",
        'query' => backdrop_get_destination(),
        'class' => array('nowrap'),
      );

      // Add table rows.
      $short_string = truncate_utf8($data['source'], 150, FALSE, TRUE);
      $rows[$lid] = array(
        array('data' => check_plain($short_string)),
        array('data' => $data['context']),
        array('data' => $langcodes),
        array('data' => array('#type' => 'operations', '#links' => $links)),
      );
    }

  }

  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No strings available.'),
  ));
  $output .= theme('pager');
  return $output;
}

/**
 * Implements hook_captcha().
 */
function riddler_captcha($op, $captcha_type = '') {
  switch ($op) {
    case 'list':
      return array('Riddler');

    case 'generate':
      if ($captcha_type == 'Riddler') {
        // @todo translatable question / answer.
        $result = array();
        $riddles = riddler_get_riddles();
        $key = array_rand($riddles);
        $question = config_get_translated('riddler.settings', "riddler_questions.{$key}.question");
        $solution = config_get_translated('riddler.settings', "riddler_questions.{$key}.answer");
        $config = config('riddler.settings');
        $result['form']['captcha_response'] = array(
          '#type' => 'textfield',
          '#title' => filter_xss($question),
          '#size' => 50,
          '#maxlength' => 50,
          '#required' => TRUE,
          '#weight' => $config->get('riddler_weight'),
        );
        if ($config->get('use_description')) {
          $description = config_get_translated('riddler.settings', 'description');
          $result['form']['captcha_response']['#description'] = check_plain($description);
        }
        $result['solution'] = filter_xss((string) (backdrop_strtolower($solution)));
        $result['captcha_validate'] = 'riddler_captcha_validate';
        return $result;
      }
      break;

  }
}

/**
 * Custom captcha validation.
 *
 * @param string $solution
 *   Comma-separated string of acceptable answers.
 * @param string $response
 *   User enter answer to match agains solution.
 *
 * @return bool
 *   TRUE if the response is found in the solution, or FALSE.
 */
function riddler_captcha_validate($solution, $response) {
  $solution = str_ireplace(',', ' ', $solution);
  $solution = explode(' ', $solution);
  return in_array(backdrop_strtolower($response), $solution);
}

/**
 * Load riddles from config.
 */
function riddler_get_riddles() {
  $riddles = config_get('riddler.settings', 'riddler_questions');
  return !empty($riddles) ? $riddles : array();
}

/**
 * Helper function to cleanup outdated strings from locale tables.
 *
 * @param array $existing_translatables
 *   List of existing translatables, that are still in use and should be kept.
 */
function _riddler_cleanup_obsolete_locale_strings($existing_translatables) {
  if (empty($existing_translatables)) {
    return;
  }

  $prefix = 'config:riddler.settings:';
  $contexts = array();
  foreach ($existing_translatables as $translatable) {
    $contexts[] = $prefix . $translatable;
  }
  // Get all entries with our prefix that are not in use anymore.
  $sql_query = db_select('locales_source', 's')
    ->fields('s', array('lid'))
    ->condition('s.context', $prefix . '%', 'LIKE')
    ->condition('s.context', $contexts, 'NOT IN');

  $result = $sql_query->execute()->fetchAllAssoc('lid');
  if (empty($result)) {
    return;
  }

  $obsolete_lids = array_keys($result);
  db_delete('locales_source')
    ->condition('lid', $obsolete_lids, 'IN')
    ->execute();

  db_delete('locales_target')
    ->condition('lid', $obsolete_lids, 'IN')
    ->execute();
}
